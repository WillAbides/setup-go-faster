#!/bin/bash

# required global vars:
# RUNNER_TOOL_CACHE         # provided by action
# GITHUB_OUTPUT             # provided by action
#
# optional vars:
# INSTALL_GO_FORCE                                     # set to non-empty to force the install

set -e
[ -n "$DEBUG" ] && set -x

CDPATH="" cd -- "$(dirname -- "$(dirname -- "$0")")"

. src/lib

install_go_version="$1"
target_dir="$2"
tip_target_dir="$3"

debug_out starting install-go

export GOROOT=""
export GO111MODULE=off

if [ -d "$target_dir" ]; then
  echo "$target_dir" already exists
  if [ -z "$INSTALL_GO_FORCE" ]; then
    skip_install=1
  fi
fi

[ -n "$skip_install" ] || install_go "$install_go_version" "$target_dir"

GITHUB_ENV="${GITHUB_ENV:-/dev/null}"
GITHUB_PATH="${GITHUB_PATH:-/dev/null}"

add_to_github_path "$target_dir/bin"
PATH="$(add_to_system_path "$target_dir/bin")"
echo PATH="$PATH"

gopath=$(go env GOPATH)
mkdir -p "$gopath/bin"

add_to_github_path "$gopath/bin"
PATH="$(add_to_system_path "$gopath/bin")"

unset GOROOT

if [ -n "$INSTALL_GO_TIP" ]; then
  GO111MODULE=off go get golang.org/dl/gotip
  "$gopath/bin/$(exe_name gotip)" download
  rm -rf "$tip_target_dir"
  mkdir -p "$(dirname "$tip_target_dir")"
  mv "$(sdk_dir)/gotip" "$tip_target_dir"

  add_to_github_path "$tip_target_dir/bin"
  PATH="$(add_to_system_path "$tip_target_dir/bin")"
fi

govars='GOCACHE
GOMODCACHE
GOPATH
GOROOT
GOTOOLDIR'

echo "GOROOT=$(go env GOROOT)" >> "$GITHUB_ENV"

for var in $govars; do
  echo "$var=$(go env "$var")" >> "$GITHUB_OUTPUT"
done
